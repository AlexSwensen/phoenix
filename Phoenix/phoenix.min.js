"use strict";!function(e){var n={};e.on=function(e,i){var t=new Event(e,i);if(t)return n[t.hash()]=t,t.hash()},e.off=function(e){var i=n[e];i&&(i.disable(),delete n[e])},e.once=function(n,i){var t=e.on(n,function(){!1!==i.apply(null,arguments)&&e.off(t)})}}(Event),function(e){var n={};e.on=function(e,i,t){var r=new Key(e,i,t);if(r)return n[r.hash()]=r,r.hash()},e.off=function(e){var i=n[e];i&&(i.disable(),delete n[e])},e.once=function(n,i,t){var r=e.on(n,i,function(){!1!==t.apply(null,arguments)&&e.off(r)})}}(Key),Modal.build=function(e){var n=new Modal;return _(e).omit("origin").each(function(e,i){n[i]=e}),_(e.origin).isFunction()&&(n.origin=e.origin(n.frame())),n},Screen.prototype.frameInRectangle=function(){return Phoenix.log("Deprecated: Function Screen#frameInRectangle() is deprecated and will be removed in later versions, use Screen#flippedFrame() instead."),this.flippedFrame()},Screen.prototype.visibleFrameInRectangle=function(){return Phoenix.log("Deprecated: Function Screen#visibleFrameInRectangle() is deprecated and will be removed in later versions, use Screen#flippedVisibleFrame() instead."),this.flippedVisibleFrame()},Space.prototype.screen=function(){return Phoenix.log("Deprecated: Function Space#screen() is deprecated and will be removed in later versions, use Space#screens() instead."),_.first(this.screens())},function(e){var n={};e.run=function(e,i,t){var r=new Task(e,i,function(e){t&&t(e),Task.terminate(e.hash())});return n[r.hash()]=r,r.hash()},e.terminate=function(e){var i=n[e];i&&(i.terminate(),delete n[e])}}(Task),function(e){var n={};e.after=function(e,i){var t=new Timer(e,!1,function(e){i(e),Timer.off(e.hash())});return n[t.hash()]=t,t.hash()},e.every=function(e,i){var t=new Timer(e,!0,i);return n[t.hash()]=t,t.hash()},e.off=function(e){var i=n[e];i&&(i.stop(),delete n[e])}}(Timer),this.clearTimeout=Timer.off,this.clearInterval=Timer.off,this.setTimeout=function(e,n){return Timer.after(n/1e3,e)},this.setInterval=function(e,n){return Timer.every(n/1e3,e)},Window.prototype.isMinimised=Window.prototype.isMinimized,Window.prototype.maximise=Window.prototype.maximize,Window.prototype.minimise=Window.prototype.minimize,Window.prototype.unminimise=Window.prototype.unminimize,Window.prototype.neighbours=Window.prototype.neighbors,Window.prototype.focusClosestNeighbour=Window.prototype.focusClosestNeighbor;